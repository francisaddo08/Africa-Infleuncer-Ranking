// <auto-generated />
using System;
using AppApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AppApi.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppApi.Enities.CityMapData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("BoundSWLong")
                        .HasColumnType("float");

                    b.Property<double?>("BoundsNELat")
                        .HasColumnType("float");

                    b.Property<double?>("BoundsNELong")
                        .HasColumnType("float");

                    b.Property<double?>("BoundsSWLat")
                        .HasColumnType("float");

                    b.Property<int>("InfluencerId")
                        .HasColumnType("int");

                    b.Property<double?>("LocationLat")
                        .HasColumnType("float");

                    b.Property<double?>("LocationLong")
                        .HasColumnType("float");

                    b.Property<string>("PlaceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("ViewPortNELat")
                        .HasColumnType("float");

                    b.Property<double?>("ViewPortNELong")
                        .HasColumnType("float");

                    b.Property<double?>("ViewPortSWLat")
                        .HasColumnType("float");

                    b.Property<double?>("ViewPortSWLong")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("InfluencerId")
                        .IsUnique();

                    b.ToTable("City");
                });

            modelBuilder.Entity("AppApi.Enities.CountryMapData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("BoundSWLong")
                        .HasColumnType("float");

                    b.Property<double?>("BoundsNELat")
                        .HasColumnType("float");

                    b.Property<double?>("BoundsNELong")
                        .HasColumnType("float");

                    b.Property<double?>("BoundsSWLat")
                        .HasColumnType("float");

                    b.Property<int>("InfluencerId")
                        .HasColumnType("int");

                    b.Property<double?>("LocationLat")
                        .HasColumnType("float");

                    b.Property<double?>("LocationLong")
                        .HasColumnType("float");

                    b.Property<string>("PlaceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("ViewPortNELat")
                        .HasColumnType("float");

                    b.Property<double?>("ViewPortNELong")
                        .HasColumnType("float");

                    b.Property<double?>("ViewPortSWLat")
                        .HasColumnType("float");

                    b.Property<double?>("ViewPortSWLong")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("InfluencerId")
                        .IsUnique();

                    b.ToTable("Country");
                });

            modelBuilder.Entity("AppApi.Enities.FaceBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IconImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InfluencerId")
                        .HasColumnType("int");

                    b.Property<long>("Likes")
                        .HasColumnType("bigint");

                    b.Property<long>("TalkingAbout")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("InfluencerId")
                        .IsUnique();

                    b.ToTable("FaceBook");
                });

            modelBuilder.Entity("AppApi.Enities.Influencer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFaceBook")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsInstagram")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTwitter")
                        .HasColumnType("bit");

                    b.Property<bool>("IsYouTube")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Influencer");
                });

            modelBuilder.Entity("AppApi.Enities.Instagram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("AverageComments")
                        .HasColumnType("float");

                    b.Property<long?>("AverageLikes")
                        .HasColumnType("bigint");

                    b.Property<double?>("EngagementRate")
                        .HasColumnType("float");

                    b.Property<long?>("Followers")
                        .HasColumnType("bigint");

                    b.Property<string>("IconImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InfluencerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InfluencerId")
                        .IsUnique();

                    b.ToTable("Instagram");
                });

            modelBuilder.Entity("AppApi.Enities.Twitter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long?>("Followers")
                        .HasColumnType("bigint");

                    b.Property<string>("IconImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InfluencerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InfluencerId")
                        .IsUnique();

                    b.ToTable("Twitter");
                });

            modelBuilder.Entity("AppApi.Enities.YouTube", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IconImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InfluencerId")
                        .HasColumnType("int");

                    b.Property<long>("Subscribers")
                        .HasColumnType("bigint");

                    b.Property<long>("Views")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("InfluencerId")
                        .IsUnique();

                    b.ToTable("YouTube");
                });

            modelBuilder.Entity("AppApi.Enities.CityMapData", b =>
                {
                    b.HasOne("AppApi.Enities.Influencer", null)
                        .WithOne("CityMapData")
                        .HasForeignKey("AppApi.Enities.CityMapData", "InfluencerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppApi.Enities.CountryMapData", b =>
                {
                    b.HasOne("AppApi.Enities.Influencer", null)
                        .WithOne("MapData")
                        .HasForeignKey("AppApi.Enities.CountryMapData", "InfluencerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppApi.Enities.FaceBook", b =>
                {
                    b.HasOne("AppApi.Enities.Influencer", null)
                        .WithOne("FaceBook")
                        .HasForeignKey("AppApi.Enities.FaceBook", "InfluencerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppApi.Enities.Instagram", b =>
                {
                    b.HasOne("AppApi.Enities.Influencer", null)
                        .WithOne("Instagram")
                        .HasForeignKey("AppApi.Enities.Instagram", "InfluencerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppApi.Enities.Twitter", b =>
                {
                    b.HasOne("AppApi.Enities.Influencer", null)
                        .WithOne("Twitter")
                        .HasForeignKey("AppApi.Enities.Twitter", "InfluencerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppApi.Enities.YouTube", b =>
                {
                    b.HasOne("AppApi.Enities.Influencer", null)
                        .WithOne("YouTube")
                        .HasForeignKey("AppApi.Enities.YouTube", "InfluencerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppApi.Enities.Influencer", b =>
                {
                    b.Navigation("CityMapData");

                    b.Navigation("FaceBook");

                    b.Navigation("Instagram");

                    b.Navigation("MapData");

                    b.Navigation("Twitter");

                    b.Navigation("YouTube");
                });
#pragma warning restore 612, 618
        }
    }
}
